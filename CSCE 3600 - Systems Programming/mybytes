#================================================================#
#                         Marco Duarte                           #
#                    marcoduarte2@my.unt.edu                     #
#                        CSCE 3600:001                           #
#                      February, 18, 2016                        #
#                                                                #
#  This bash script lists information about the current          #
#  directory such as the numbers of readable and executable      #
#  files, directories, and the total size of ordinary files.     #
#  The number of non-existant files is also displayed when the   #
#  name of a file is specified and cannot be found.              #
#                                                                #
#================================================================#

#! /bin/bash

file_data()
{
	echo $'\n'
	echo ================= file data =================
	echo "ordinary, readable, executable files  :" $orx_files 
	echo "non-existent or other types of files  :" $dne_files
	echo "directory files                       :" $d_files
	echo "ordinary and readable files           :" $r_files
	echo "total bytes in ordinary files         :" $total
	echo $'\n'
}
#no parameters are specified
if [ $# -eq 0 ]; then

	  #variable holds the number of readable and executable files
	orx_files=$(find ./ -maxdepth 1 -type f -readable -executable | wc -l)

	  #non-existant files
	dne_files=0

	  #number of directory files (-d)
	d_files=$(ls -d */ | wc -l)

	  #number of ordianry (-type f) readable files
	r_files=$(find ./ -maxdepth 1 -type f -readable | wc -l)

	  #total size (-c) of ordinary files (-type f) in bytes (-b), 
	  #awk gets the first entry ($1) printed by du, and tail gets the last line 
	  #since du prints the size for each file found due to it being called 
	  #multiple times with xargs
	total=$(find ./ -maxdepth 1 -type f | xargs du -b -c --exclude=./.* | awk '{print $1}' | tail -n 1)
else
	
	  #finds the specified file or patterns ($*), 
	  #2>/dev/null suppresses any error messages resulting from 
	  #non-existant files
	orx_files=$(find $* -maxdepth 1 -type f -readable -executable 2>/dev/null | wc -l)
	d_files=$(find $* -type d 2>/dev/null | wc -l)
	r_files=$(find $* -maxdepth 1 -type f -readable 2>/dev/null | wc -l)
	total=$(du $* -b -c 2>/dev/null | awk '{print $1}' | tail -n 1)

	#number of specified files found
	temp=$(find $* 2>/dev/null | wc -l)
	
	if [ $temp -ne 0 ]; then #some found
		let dne_files=$#-temp

	else #none found
		dne_files=$#
	fi
fi

file_data
